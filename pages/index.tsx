import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import web3 from "../components/web3";
import Asset from "../build/contracts/Asset.json";
import { useEffect, useState } from "react";

const asset = new web3.eth.Contract(
  Asset.abi as any,
  "0x4fDD0BA544111AD1b14B0487c2B84988B6dF6def"
);

const Home: NextPage = () => {
  const [from, setFrom] = useState("");
  const [balance, setBalance] = useState(0);
  const [error, setError] = useState<any>("");
  const [tokenName, setTokenName] = useState("");
  const [ownedToken, setOwnedToken] = useState([]);
  const [ownedTokenURIs, setOwnedTokenURIs] = useState<any>([]);

  const mint = async (uri: string) => {
    try {
      await asset.methods.mintAsset(uri).send({
        from: from,
      });
      setTokenName(await asset.methods.name().call());
      getOwnedTokens();
      getOwnedTokensURIs();
    } catch (err) {
      setError(err);
    } finally {
      const balance = await asset.methods.balanceOf(from).call();
      setBalance(balance);
    }
  };

  const getOwnedTokens = async () => {
    const ownedToken = await asset.methods.getOwnedTokens().call();
    setOwnedToken(ownedToken);
  };

  const getOwnedTokensURIs = async () => {
    const ownedTokenURIs = await asset.methods.getOwnedTokensURIs().call();
    const fetchedMetadata = await Promise.all(
      ownedTokenURIs.map((tokenUri: string) => {
        return fetch(tokenUri)
          .then((res) => {
            return res.json();
          })
          .then((data) => {
            return data;
          });
      })
    ).catch((err) => {
      console.log(err);
    });
    setOwnedTokenURIs(fetchedMetadata);
  };

  const showTokens = async () => {
    const tokens = await asset.methods.getTotalAssets().call;
  };

  useEffect(() => {
    (async () => {
      const accounts = await web3.eth.getAccounts();
      setFrom(accounts[0]);
      getOwnedTokens();
      getOwnedTokensURIs();
      try {
        const balance = await asset.methods.balanceOf(from).call();
        setBalance(balance);
      } catch (err) {
        setError(`Balance not available: ${err}`);
      }
    })();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>NextFrame</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="text-lg px-6 py-4 bg-green-200 text-green-900 border-green-900 rounded-md">
          {from}
        </h1>
        <h1 className="text-lg px-6 py-4 bg-orange-200 text-orange-900 border-orange-900 rounded-md">
          Total Token: {balance}
        </h1>
        <h1 className="text-lg px-6 py-4 bg-orange-200 text-orange-900 border-orange-900 rounded-md">
          {ownedToken.map((token) => {
            return (
              <span className="px-1" key={token}>
                {token}
              </span>
            );
          })}
        </h1>
        {ownedTokenURIs.map(
          ({ name, description, image }: any, index: number) => {
            return (
              <span className="px-1" key={name + index}>
                <p>{description}</p>
                <img src={image} alt="" />
              </span>
            );
          }
        )}
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          onClick={() =>
            mint(
              "http://localhost:8080/ipfs/QmdxgWQMCq4D1ck7qyJvM1gxjnGsuz5FyuCmcZyiMUkTME"
            )
          }
        >
          {tokenName !== "" ? tokenName : "Mint"}
        </button>
      </main>
    </div>
  );
};

export default Home;
